import glyphNameFormatter
reload(glyphNameFormatter)
from glyphNameFormatter.unicodeRangeNames import getRangeByName, getAllRangeNames
from glyphNameFormatter.data import unicode2name_AGD

#   Find duplicate names for different unicodes


def findConflict():
    names = {}
    lines = []
    for rangeName in getAllRangeNames():
        start, end = getRangeByName(rangeName)
        for uniNumber in range(start, end+1):
            glyphName = glyphNameFormatter.GlyphName(uniNumber)
            if glyphName.hasName():
                # lines.append("%04X\t%s\t%s" % (uniNumber, glyphName.getName(), glyphName.uniName))
                name = glyphName.getName(extension=False)
                extendedName = glyphName.getName(extension=True)
                if not name in names:
                    names[name] = []
                names[name].append((uniNumber, glyphName.uniRangeName, extendedName))
    n = names.keys()
    n.sort()

    conflictNames = []
    conflictUniNumbers = []
    conflictsPerRange = {}
    for name in n:
        if len(names[name]) > 1:
            conflictNames.append(name)
            line = "\n%s" % (name)
            print line
            lines.append(line)
            line = "        %04s%20s%20s%20s%40s"%("hex", "formatted name", "AGL name", "with extension", "range")
            print line
            lines.append(line)
            for g in names[name]:
                rangeName = g[1]
                extendedName = g[2]
                conflictUniNumbers.append(g[0])
                AGLname = unicode2name_AGD.get(g[0], "-")
                line = "        %04X%20s%20s%20s%40s"%(g[0], name, AGLname, extendedName, rangeName)
                print line
                lines.append(line)

                if not rangeName in conflictsPerRange:
                    conflictsPerRange[rangeName] = []
                conflictsPerRange[rangeName].append(line)
    stats =  "# %d names with conflicts, affecting %d unicodes"%(len(conflictNames), len(conflictUniNumbers))
    print stats
    lines.append(stats)

    k = conflictsPerRange.keys()
    lines.append("")
    lines.append("")
    lines.append("Conflicts by rangename")
    k.sort()
    for rangeName in k:
        for line in conflictsPerRange[rangeName]:
            #print "line", line
            lines.append(line)

    path = "./../names/conflict.txt"
    f = open(path, 'w')
    f.write("\n".join(lines))
    f.close()


    path = "./../data/scriptConflictNames.py"
    pyText = ["# Table with conflicting names. Generated by /test/testConflicts.py", "\nscriptConflictNames = ["]
    conflictNames.sort()
    for name in conflictNames:
        pyText.append("    \"%s\","%name)
    pyText.append("]\n\n")
    f = open(path, 'w')
    f.write("\n".join(pyText))
    f.close()

if __name__ == "__main__":
    findConflict()
