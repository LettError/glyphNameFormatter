from __future__ import print_function
import glyphNameFormatter
reload(glyphNameFormatter)
from glyphNameFormatter.unicodeRangeNames import getRangeByName, getAllRangeNames
from glyphNameFormatter.data import unicode2name_AGD

#   Find duplicate names for different unicodes


def findConflict():
    names = {}
    extendedNames = {}
    lines = []
    for rangeName in getAllRangeNames():
        start, end = getRangeByName(rangeName)
        for uniNumber in range(start, end+1):
            glyphName = glyphNameFormatter.GlyphName(uniNumber)
            if glyphName.hasName():
                # lines.append("%04X\t%s\t%s" % (uniNumber, glyphName.getName(), glyphName.uniName))
                name = glyphName.getName(extension=False)
                extendedName = glyphName.getName(extension=True)
                if name not in names:
                    names[name] = []
                names[name].append(glyphName)
                if extendedName not in extendedNames:
                    extendedNames[extendedName] = []
                extendedNames[extendedName].append(glyphName)
    n = names.keys()
    n.sort()

    conflictNames = []
    conflictUniNumbers = []
    conflictsPerRange = {}
    line = "{0:>6s} | {1:<50}{2:<25}{3:<40}{4:<40}{5:<20}".format("hex", "basic formatted name", "AGL name", "with extension", "range", "uni name")
    print(line)
    lines.append(line)
    line = "{0:->6s} + {1:-<50}{2:-<25}{3:-<40}{4:-<40}{5:-<20}".format("", "", "+", "+", "+", "+")
    print(line)
    lines.append(line)
    for name in n:
        if len(names[name]) > 1:
            conflictNames.append(name)
            line = ""
            print()
            lines.append(line)
            for g in names[name]:
                rangeName = g.uniRangeName
                extendedName = g.getName(extension=True)
                conflictUniNumbers.append(g.uniNumber)
                AGLname = unicode2name_AGD.get(g.uniNumber, "-")
                line = "{0:>6X} : {1:<50}{2:<25}{3:<40}{4:<40}{5:<20}".format(g.uniNumber, g.getName(), AGLname[:25], g.getName(), g.uniRangeName[:40], g.uniName)
                print(line)
                lines.append(line)

                if not rangeName in conflictsPerRange:
                    conflictsPerRange[rangeName] = []
                conflictsPerRange[rangeName].append(line)
    stats =  "# %d names with conflicts, affecting %d unicodes"%(len(conflictNames), len(conflictUniNumbers))
    print(stats)
    lines.append(stats)

    k = conflictsPerRange.keys()
    lines.append("")
    lines.append("")
    lines.append("Conflicts by rangename")
    k.sort()
    for rangeName in k:
        lines.append("\n%s"%rangeName)
        for line in conflictsPerRange[rangeName]:
            lines.append(line)

    lines.append("")
    lines.append("")
    lines.append("Doubles over all ranges")
    for extenedName in sorted(extendedNames.keys()):
        glyphs = extendedNames[extenedName]
        if len(glyphs) > 1:
            for g in glyphs:
                line = "{0:>6X} : {1:<50}{2:<25}{3:<40}{4:<40}{5:<20}".format(g.uniNumber, g.getName(), AGLname[:25], g.getName(), g.uniRangeName[:40], g.uniName)
                print(line)
                lines.append(line)

    path = "./../names/conflict.txt"
    f = open(path, 'w')
    f.write("\n".join(lines))
    f.close()


    path = "./../data/scriptConflictNames.py"
    pyText = ["# Table with conflicting names. Generated by /test/testConflicts.py", "\nscriptConflictNames = ["]
    conflictNames.sort()
    for name in conflictNames:
        pyText.append("    \"%s\","%name)
    pyText.append("]\n\n")
    f = open(path, 'w')
    f.write("\n".join(pyText))
    f.close()

if __name__ == "__main__":
    if False:
        from random import randint
        line = "{0:>6s} | {1:<50}{2:<25}{3:<40}{4:<40}".format("hex", "formatted name", "AGL name", "with extension", "range")
        print(line)
        line = "{0:->6s} + {1:-<50}{2:-<25}{3:-<40}{4:<40}".format("", "", "+", "+", "+")
        print(line)
        for i in range(10):
            g= glyphNameFormatter.GlyphName(randint(0,0xffff))
            line = "{0:>6X} : {1:<50}{2:<25}{3:<40}{4:<40}".format(g.uniNumber, g.getName(), "AGLname"[:25], g.getName(), g.uniRangeName[:40])
            print(line)
    findConflict()
